name: Deploy API

on:
  push:
    branches:
      - main
      - develop
    paths:
      - 'api/**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version to deploy (leave empty for auto)'
        required: false
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: mirrorly-api

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: mirrorly_test
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: api/package-lock.json

      - name: Install dependencies
        working-directory: ./api
        run: npm ci

      - name: Run linting
        working-directory: ./api
        run: npm run lint

      - name: Run type checking
        working-directory: ./api
        run: npm run type-check

      - name: Wait for MySQL
        run: |
          while ! mysqladmin ping -h"127.0.0.1" -P3306 -utest_user -ptest_password --silent; do
            sleep 1
          done

      - name: Run database migrations
        working-directory: ./api
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: mirrorly_test
          DB_USER: test_user
          DB_PASSWORD: test_password
        run: npm run migrate

      - name: Run tests
        working-directory: ./api
        env:
          NODE_ENV: test
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_NAME: mirrorly_test
          DB_USER: test_user
          DB_PASSWORD: test_password
          GOOGLE_AI_API_KEY: ${{ secrets.GOOGLE_AI_API_KEY_TEST }}
        run: npm test -- --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./api/coverage/lcov.info
          flags: api
          name: api-coverage

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name != 'pull_request'

    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./api
          file: ./api/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

      - name: Deploy to staging server
        env:
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          ssh -o StrictHostKeyChecking=no $STAGING_USER@$STAGING_HOST << 'EOF'
            # Pull latest image
            docker pull ${{ env.IMAGE_TAG }}

            # Stop existing container
            docker stop mirrorly-api-staging || true
            docker rm mirrorly-api-staging || true

            # Run new container
            docker run -d \
              --name mirrorly-api-staging \
              --restart unless-stopped \
              -p 3001:3000 \
              --env-file /opt/mirrorly/.env.staging \
              -v /opt/mirrorly/logs:/app/logs \
              -v /opt/mirrorly/uploads:/app/uploads \
              ${{ env.IMAGE_TAG }}

            # Wait for health check
            sleep 30

            # Verify deployment
            if curl -f http://localhost:3001/health; then
              echo "Staging deployment successful"
            else
              echo "Staging deployment failed"
              exit 1
            fi
          EOF

      - name: Run smoke tests
        env:
          STAGING_URL: ${{ secrets.STAGING_URL }}
        run: |
          # Basic health check
          curl -f $STAGING_URL/health

          # API version check
          curl -f $STAGING_URL/api/v1/status

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

      - name: Deploy to production server
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
          IMAGE_TAG: ${{ needs.build.outputs.image-tag }}
        run: |
          ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            # Create backup of current deployment
            docker tag mirrorly-api-prod mirrorly-api-prod-backup-$(date +%Y%m%d-%H%M%S) || true

            # Pull latest image
            docker pull ${{ env.IMAGE_TAG }}

            # Zero-downtime deployment
            # Start new container on different port
            docker run -d \
              --name mirrorly-api-prod-new \
              --restart unless-stopped \
              -p 3002:3000 \
              --env-file /opt/mirrorly/.env.production \
              -v /opt/mirrorly/logs:/app/logs \
              -v /opt/mirrorly/uploads:/app/uploads \
              ${{ env.IMAGE_TAG }}

            # Wait for new container to be ready
            sleep 30

            # Health check on new container
            if curl -f http://localhost:3002/health; then
              echo "New container is healthy"

              # Update load balancer to point to new container
              # (This would be specific to your load balancer setup)

              # Stop old container
              docker stop mirrorly-api-prod || true
              docker rm mirrorly-api-prod || true

              # Rename new container
              docker stop mirrorly-api-prod-new
              docker commit mirrorly-api-prod-new mirrorly-api-prod-temp
              docker rm mirrorly-api-prod-new

              # Start with correct port
              docker run -d \
                --name mirrorly-api-prod \
                --restart unless-stopped \
                -p 3000:3000 \
                --env-file /opt/mirrorly/.env.production \
                -v /opt/mirrorly/logs:/app/logs \
                -v /opt/mirrorly/uploads:/app/uploads \
                mirrorly-api-prod-temp

              # Cleanup
              docker rmi mirrorly-api-prod-temp

              echo "Production deployment successful"
            else
              echo "New container failed health check, rolling back"
              docker stop mirrorly-api-prod-new
              docker rm mirrorly-api-prod-new
              exit 1
            fi
          EOF

      - name: Run production smoke tests
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}
        run: |
          # Basic health check
          curl -f $PRODUCTION_URL/health

          # API version check
          curl -f $PRODUCTION_URL/api/v1/status

          # License validation test
          curl -f $PRODUCTION_URL/api/v1/auth/status

      - name: Cleanup old images
        env:
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          ssh -o StrictHostKeyChecking=no $PRODUCTION_USER@$PRODUCTION_HOST << 'EOF'
            # Remove images older than 7 days
            docker images --format "table {{.Repository}}:{{.Tag}}\t{{.CreatedAt}}" | \
            grep "mirrorly-api" | \
            awk '$3 ~ /days/ && $3 > 7 {print $1}' | \
            xargs -r docker rmi || true

            # Remove dangling images
            docker image prune -f
          EOF

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result != 'skipped' || needs.deploy-production.result != 'skipped')

    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}