name: Release WordPress Plugin

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        type: string
      create_tag:
        description: 'Create git tag'
        required: false
        default: true
        type: boolean

env:
  PLUGIN_NAME: mirrorly

jobs:
  validate:
    name: Validate Plugin
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd wordpress-plugin && npm ci

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json
          tools: composer, phpunit

      - name: Install PHP dependencies
        working-directory: ./wordpress-plugin/mirrorly
        run: |
          if [ -f composer.json ]; then
            composer install --no-dev --optimize-autoloader
          fi

      - name: Validate plugin structure
        working-directory: ./wordpress-plugin/mirrorly
        run: |
          # Check required files exist
          test -f mirrorly.php || (echo "Main plugin file missing" && exit 1)
          test -f readme.txt || (echo "readme.txt missing" && exit 1)
          test -d includes || (echo "includes directory missing" && exit 1)
          test -d assets || (echo "assets directory missing" && exit 1)

          echo "Plugin structure validation passed"

      - name: PHP Lint
        working-directory: ./wordpress-plugin/mirrorly
        run: |
          find . -name "*.php" -exec php -l {} \; | grep -v "No syntax errors"
          if [ $? -eq 0 ]; then
            echo "PHP syntax validation passed"
          else
            echo "PHP syntax errors found"
            exit 1
          fi

      - name: Run PHP tests
        working-directory: ./wordpress-plugin/mirrorly
        run: |
          if [ -f phpunit.xml ]; then
            phpunit
          else
            echo "No PHPUnit configuration found, skipping tests"
          fi

  build:
    name: Build Plugin Package
    runs-on: ubuntu-latest
    needs: validate

    outputs:
      version: ${{ steps.version.outputs.version }}
      package-path: ${{ steps.build.outputs.package-path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g archiver

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Update version numbers
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          node scripts/version-manager.js set $VERSION --no-tag --no-changelog

      - name: Build plugin assets
        working-directory: ./wordpress-plugin
        run: |
          if [ -f package.json ]; then
            npm ci
            npm run build
          fi

      - name: Build plugin package
        id: build
        env:
          VERSION: ${{ steps.version.outputs.version }}
        run: |
          # Run the plugin build script
          node scripts/build-plugin.js

          # Set output
          PACKAGE_PATH="dist/${PLUGIN_NAME}-${VERSION}.zip"
          echo "package-path=$PACKAGE_PATH" >> $GITHUB_OUTPUT

          # Verify package was created
          if [ ! -f "$PACKAGE_PATH" ]; then
            echo "Package not found: $PACKAGE_PATH"
            exit 1
          fi

          echo "Package created: $PACKAGE_PATH"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: plugin-package
          path: |
            dist/${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.zip
            dist/${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.checksums.txt
            dist/${{ env.PLUGIN_NAME }}-${{ steps.version.outputs.version }}.build-info.json
          retention-days: 30

  test-package:
    name: Test Plugin Package
    runs-on: ubuntu-latest
    needs: build

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: wordpress
          MYSQL_DATABASE: wordpress_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-package
          path: dist/

      - name: Setup WordPress test environment
        run: |
          # Install WordPress CLI
          curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
          chmod +x wp-cli.phar
          sudo mv wp-cli.phar /usr/local/bin/wp

          # Download WordPress
          wp core download --path=/tmp/wordpress

          # Configure WordPress
          wp config create \
            --path=/tmp/wordpress \
            --dbname=wordpress_test \
            --dbuser=root \
            --dbpass=wordpress \
            --dbhost=127.0.0.1:3306

          # Install WordPress
          wp core install \
            --path=/tmp/wordpress \
            --url=http://localhost \
            --title="Test Site" \
            --admin_user=admin \
            --admin_password=admin \
            --admin_email=admin@test.com

      - name: Install and activate plugin
        env:
          PACKAGE_PATH: ${{ needs.build.outputs.package-path }}
        run: |
          # Extract plugin to WordPress plugins directory
          unzip -q "dist/${{ env.PLUGIN_NAME }}-${{ needs.build.outputs.version }}.zip" -d /tmp/wordpress/wp-content/plugins/

          # Activate plugin
          wp plugin activate ${{ env.PLUGIN_NAME }} --path=/tmp/wordpress

          # Verify plugin is active
          wp plugin list --status=active --path=/tmp/wordpress | grep ${{ env.PLUGIN_NAME }}

      - name: Run plugin tests
        run: |
          # Check if plugin loaded without errors
          wp eval 'if (is_plugin_active("${{ env.PLUGIN_NAME }}/${{ env.PLUGIN_NAME }}.php")) { echo "Plugin loaded successfully\n"; } else { exit(1); }' --path=/tmp/wordpress

          # Test basic functionality
          wp eval 'do_action("init"); echo "WordPress hooks working\n";' --path=/tmp/wordpress

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, test-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-package
          path: dist/

      - name: Generate release notes
        id: release-notes
        env:
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          # Extract changelog for this version
          if [ -f CHANGELOG.md ]; then
            # Get changelog section for this version
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '$d' > release-notes.md
          else
            echo "Release $VERSION" > release-notes.md
            echo "" >> release-notes.md
            echo "See commit history for changes." >> release-notes.md
          fi

          echo "Release notes generated"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release ${{ needs.build.outputs.version }}
          body_path: release-notes.md
          files: |
            dist/${{ env.PLUGIN_NAME }}-${{ needs.build.outputs.version }}.zip
            dist/${{ env.PLUGIN_NAME }}-${{ needs.build.outputs.version }}.checksums.txt
          draft: false
          prerelease: ${{ contains(needs.build.outputs.version, '-') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  wordpress-org-deploy:
    name: Deploy to WordPress.org
    runs-on: ubuntu-latest
    needs: [build, test-package]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && !contains(needs.build.outputs.version, '-')
    environment: wordpress-org

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-package
          path: dist/

      - name: Setup SVN
        run: |
          sudo apt-get update
          sudo apt-get install -y subversion

      - name: Deploy to WordPress.org SVN
        env:
          WP_ORG_USERNAME: ${{ secrets.WP_ORG_USERNAME }}
          WP_ORG_PASSWORD: ${{ secrets.WP_ORG_PASSWORD }}
          VERSION: ${{ needs.build.outputs.version }}
        run: |
          # This is a template - adjust based on your WordPress.org plugin setup

          # Checkout SVN repository
          svn co https://plugins.svn.wordpress.org/${{ env.PLUGIN_NAME }} /tmp/svn

          # Extract plugin to trunk
          unzip -q "dist/${{ env.PLUGIN_NAME }}-$VERSION.zip" -d /tmp/svn/trunk/

          # Copy to tags
          cp -r /tmp/svn/trunk /tmp/svn/tags/$VERSION

          # Add new files
          cd /tmp/svn
          svn add --force .

          # Remove deleted files
          svn status | grep '^!' | awk '{print $2}' | xargs -r svn delete

          # Commit changes
          svn commit -m "Release version $VERSION" --username $WP_ORG_USERNAME --password $WP_ORG_PASSWORD

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, wordpress-org-deploy]
    if: always() && (needs.create-release.result != 'skipped' || needs.wordpress-org-deploy.result != 'skipped')

    steps:
      - name: Notify Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#releases'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          fields: repo,message,commit,author,action,eventName,ref,workflow
          custom_payload: |
            {
              "text": "WordPress Plugin Release",
              "attachments": [{
                "color": "${{ job.status == 'success' && 'good' || 'danger' }}",
                "fields": [{
                  "title": "Plugin",
                  "value": "${{ env.PLUGIN_NAME }}",
                  "short": true
                }, {
                  "title": "Version",
                  "value": "${{ needs.build.outputs.version }}",
                  "short": true
                }, {
                  "title": "Status",
                  "value": "${{ job.status }}",
                  "short": true
                }]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}